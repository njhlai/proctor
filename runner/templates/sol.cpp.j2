#include <utils.h>
#include <leetcode/includes.h>
{% if datastructs -%}
{% for struct in datastructs -%}
#include <{{ struct.0 }}/{{ struct.1 | lower }}.h>
{% endfor %}
{%- endif %}
using namespace std;

//>>>>>
{{ code }}
//<<<<<

#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#define DOCTEST_CONFIG_SUPER_FAST_ASSERTS
#include <doctest/doctest.h>
{%- if examples -%}
{% for example in examples %}

TEST_CASE("Case {{ loop.index }}") {
    {% for variable in variables -%}
    {{ variable.1.transformed }} {% if variable.1.form == "Pointer" %}*{% endif %}{{ variable.0 }}{{ example | nth(n=loop.index0) | process(lang="cpp",type=variable.1) }};
    {% endfor -%}
    {{ return.transformed }} {% if return.form == "Pointer" %}*{% endif %}expectedOutput = ; // fill in expected result here

    Solution sol;
    {% if return.transformed != "void" -%}
    {{ return.transformed }} {% if return.form == "Pointer" %}*{% endif %}output = {% endif %}sol.{{ function }}({% for variable in variables -%}
    {{ variable.0 }}{% if not loop.last %}, {% endif -%}
    {% endfor %});

    INFO("Input: {% for variable in variables -%}
    {{ variable.0 }} = " << {% if variable.1.form == "Pointer" %}*{% endif %}{{ variable.0 }}{% if not loop.last %} << ", {% endif -%}
    {% endfor %});
    CHECK({% if return.form == "Pointer" %}*{% endif %}expectedOutput == {% if return.form == "Pointer" %}*{% endif %}output);{% if cleanup %}

    {% endif %}{% for variable in variables %}
    {%- if variable.1.form == "Pointer" %}destroy({{ variable.0 }}); {% endif %}{% endfor %}{% if return.form == "Pointer" %}
    destroy(expectedOutput); destroy(output);{% endif %}
}
{%- endfor %}
{%- endif %}
