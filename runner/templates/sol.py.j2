import bisect
import collections
import itertools
import functools
import heapq
import math
import operator
import queue
import random
import re
import string
from typing import List
from typing import Optional

from collections import defaultdict
from collections import deque
from collections import Counter
from collections import OrderedDict
from functools import lru_cache
from itertools import combinations
from itertools import permutations
from queue import PriorityQueue
{% if datastructs %}
{% for struct in datastructs -%}
from {{ struct.0 }}.{{ struct.1 | lower }} import {{ struct.1 }}, {{ struct.1 | camel }}From
{% endfor %}
{%- endif %}

# >>>>>
{{ code }}
# <<<<<

from unittest import main  # noqa: E402
from unittest import TestCase  # noqa: E402


class Test(TestCase):
    def setUp(self) -> None:
        self.solution = Solution()
    {%- if examples -%}
    {% for example in examples %}

    def test_case_{{ loop.index }}(self) -> None:
        {% for variable in variables -%}
        {{ variable.0 }} = {{ example | nth(n=loop.index0) | process(lang="py",type=variable.1) | camel }}
        {% endfor %}
        expectedOutput = # fill in expected result here
        output = self.solution.{{ function }}({% for variable in variables -%}
        {{ variable.0 }}{% if not loop.last %}, {% endif -%}
        {% endfor %})

        self.assertEqual(output, expectedOutput, f"\nInput: {% for variable in variables -%}
        {{ variable.0 }} = {% raw %}{{% endraw %}{{ variable.0 }}{% raw %}}{% endraw %}{% if not loop.last %}, {% endif -%}
        {% endfor %}")
    {%- endfor %}
    {%- endif %}


if __name__ == "__main__":
    main()
